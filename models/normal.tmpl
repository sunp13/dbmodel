package models

import "github.com/sunp13/dbtool"

type {{ .TableNameHump }} struct{}

// List
func (m *{{.TableNameHump}}) List() (res []map[string]interface{},err error){
    sql := `
    select * from {{.SchemaName}}.{{.TableName}}
    where is_deleted = 0
    `
    res, err = dbtool.D.QuerySQL(sql, nil)
    return
}

// Info
func (m *{{.TableNameHump}}) Info(id string) (res map[string]interface{}, err error){
    sql := `
    select * from {{.SchemaName}}.{{.TableName}}
    where {{ .PrimaryKey }} = ?
    `
    params := []interface{}{
        id,
    }

    var result []map[string]interface{}
    result, err = dbtool.D.QuerySQL(sql,params)
    if len(result) > 0{
        res = result[0]
    }
    return
}

{{ if NEQ .ForeignKey "" }}
// ListFid
func (m *{{.TableNameHump}}) ListFid(fid string) (res []map[string]interface{}, err error){
    sql := `
    select * from {{.SchemaName}}.{{.TableName}}
    where {{ .ForeignKey }} = ?
	and is_deleted = 0
    `
    params := []interface{}{
        fid,
    }

    res, err = dbtool.D.QuerySQL(sql,params)
    return
}
{{ end }}

// Page
func (m *{{.TableNameHump}}) Page(begin,size int64) (res []map[string]interface{},err error){
	sql := `
	SELECT * from {{.SchemaName}}.{{.TableName}}
	where is_deleted=0
	order by {{ .PrimaryKey }}
	limit ?,?
	`
	params := []interface{}{
		begin,
		size,
	}
	res, err = dbtool.D.QuerySQL(sql, params)
	return
}

// Count
func (m *{{.TableNameHump}}) Count() (res int64,err error){
	sql := `
	select count(1) as data_count from {{.SchemaName}}.{{.TableName}}
	where is_deleted = 0
	`
	var result []map[string]interface{}
	result, err = dbtool.D.QuerySQL(sql, nil)
	if len(result) > 0 {
		res, _ = strconv.ParseInt(fmt.Sprintf("%v", result[0]["data_count"]), 10, 64)
	}
	return
}

// Add
func (m *{{.TableNameHump}}) Add({{ JOIN .FieldsKeyHump "," }} string) (res int64, err error) {
	sql := `
	insert into {{.SchemaName}}.{{.TableName}}(
	{{ JOIN .FieldsKey ",\n\t" }},
	add_time
	) values ({{ JOIN .FieldsQuestion ","}},?)
	`
	params := []interface{}{
	{{ JOIN .FieldsKeyHump ",\n\t"}},
	time.Now().Format("2006-01-02 15:04:05"),
	}

	res, err = dbtool.D.UpdateSQL(sql, params)
	return
}

// Modify
func (m *{{.TableNameHump}}) Modify({{ .PrimaryKeyHump }} ,{{ JOIN .FieldsKeyHump "," }} string) (res int64, err error) {
	sql := `
	update {{.SchemaName}}.{{.TableName}} set
    {{ JOIN .FieldsModify ",\n\t" }},
	modify_time = ?
	where {{ .PrimaryKey }} = ?
	`
	params := []interface{}{
	{{ JOIN .FieldsKeyHump ",\n\t" }},
	time.Now().Format("2006-01-02 15:04:05"),
	{{ .PrimaryKeyHump }},
	}
	res, err = dbtool.D.UpdateSQL(sql, params)
	return
}

// Delete
func (m *{{.TableNameHump}}) Delete(id string) (res int64, err error) {
	sql := `
	update {{.SchemaName}}.{{.TableName}} set
	is_deleted = 1
	where {{ .PrimaryKey }} = ?
	`
	params := []interface{}{
		id,
	}
	res, err = dbtool.D.UpdateSQL(sql, params)
	return
}

// Filter
func (m *{{.TableNameHump}}) Filter(data map[string]string) (res []map[string]interface{}, err error) {
	sql := `
	select * from {{.SchemaName}}.{{.TableName}}
	`
	res, err = dbtool.D.QuerySQL(sql, nil)
	if err != nil {
		return
	}
	comb := dbtool.NewComb(res)
	if val, ok := data["is_deleted"]; ok && val != "" {
		comb = comb.FilterMust("is_deleted", val)
	}

	// custom field filter
	return comb.Data, nil
}